{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/lib/redis.js"],"sourcesContent":["import Redis from \"ioredis\";\r\n\r\nconst redis = new Redis({\r\n    host : \"redis-17924.crce179.ap-south-1-1.ec2.redns.redis-cloud.com\",\r\n    port  : 17924,\r\n    password : \"XSFmdGSPZwzS5zUkEsW6dXsd2AlHaLnm\"\r\n}) ;\r\n\r\nexport default redis;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,QAAQ,IAAI,2IAAA,CAAA,UAAK,CAAC;IACpB,MAAO;IACP,MAAQ;IACR,UAAW;AACf;uCAEe","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport redis from \"@/lib/redis\";\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        try {\r\n          const response = await fetch(`${process.env.NEXTAUTH_URL}/api/auth/signin`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(credentials),\r\n          })\r\n\r\n          const user = await response.json()\r\n\r\n          if (!user || user.error) {\r\n            throw new Error(user.error || \"Invalid credentials\");\r\n          }\r\n          await redis.setex(`user : ${credentials.email}`, 3600, JSON.stringify(user))\r\n          return user;\r\n        } catch (error) {\r\n          console.error(\"Authorization error:\", error);\r\n          throw new Error(\"Something went wrong\");\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  session: { strategy: \"jwt\" },\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      session.user = token.user;\r\n      return session;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) token.user = user;\r\n      return token;\r\n    },\r\n  },\r\n};\r\n\r\nexport const handler = NextAuth(authOptions);\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,cAAc;IACzB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE;wBAC1E,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;oBACvB;oBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;oBAEhC,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE;wBACvB,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;oBAChC;oBACA,MAAM,qHAAA,CAAA,UAAK,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,YAAY,KAAK,EAAE,EAAE,MAAM,KAAK,SAAS,CAAC;oBACtE,OAAO;gBACT,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,GAAG,MAAM,IAAI;YACzB,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM,MAAM,IAAI,GAAG;YACvB,OAAO;QACT;IACF;AACF;AAEO,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}