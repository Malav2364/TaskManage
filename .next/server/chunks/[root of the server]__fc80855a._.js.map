{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new  PrismaClient()\r\n\r\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAK,6HAAA,CAAA,eAAY;uCAEjB","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/lib/redis.js"],"sourcesContent":["import Redis from \"ioredis\";\r\n\r\nconst redis = new Redis({\r\n    host : \"redis-17924.crce179.ap-south-1-1.ec2.redns.redis-cloud.com\",\r\n    port  : 17924,\r\n    password : \"XSFmdGSPZwzS5zUkEsW6dXsd2AlHaLnm\"\r\n}) ;\r\n\r\nexport default redis;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,QAAQ,IAAI,2IAAA,CAAA,UAAK,CAAC;IACpB,MAAO;IACP,MAAQ;IACR,UAAW;AACf;uCAEe","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/app/api/tasks/route.js"],"sourcesContent":["import prisma from \"@/lib/prisma\";\r\nimport { NextResponse } from \"next/server\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport redis from \"@/lib/redis\";\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET;\r\n\r\nexport async function POST(req) {\r\n    try {\r\n        const body = await req.json();\r\n        const { title, description } = body;\r\n\r\n        if (!title || !description) {\r\n            return NextResponse.json({ success: false, message: \"Title and description are required\" }, { status: 400 });\r\n        }\r\n\r\n        const authHeader = req.headers.get(\"authorization\");\r\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n            return NextResponse.json({ success: false, message: \"Unauthorized: No token provided\" }, { status: 401 });\r\n        }\r\n\r\n        const token = authHeader.split(\" \")[1];\r\n        let decoded;\r\n        try {\r\n            decoded = jwt.verify(token, JWT_SECRET);\r\n        } catch (error) {\r\n            return NextResponse.json({ success: false, message: \"Invalid or expired token\" }, { status: 401 });\r\n        }\r\n\r\n        const userId = decoded.id;\r\n        if (!userId) {\r\n            return NextResponse.json({ success: false, message: \"Invalid token: User ID not found\" }, { status: 401 });\r\n        }\r\n\r\n        const existingUser = await prisma.user.findUnique({\r\n            where: { id: userId }\r\n        });\r\n\r\n        if (!existingUser) {\r\n            return NextResponse.json({ success: false, message: \"User not found\" }, { status: 404 });\r\n        }\r\n        \r\n        const newTask = await prisma.task.create({\r\n            data: { title, description, userId}\r\n        });\r\n\r\n        await redis.del(`tasks:${userId}`); // âœ… Clear only this user's tasks cache\r\n\r\n        return NextResponse.json({ success: true, task: newTask }, { status: 201 });\r\n    } catch (error) {\r\n        return NextResponse.json({ success: false, message: error.message }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function GET(req) {\r\n    try {\r\n        const authHeader = req.headers.get(\"authorization\");\r\n        if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n            return NextResponse.json({ success: false, message: \"Unauthorized\" }, { status: 401 });\r\n        }\r\n\r\n        const token = authHeader.split(\" \")[1];\r\n        const decoded = jwt.verify(token, JWT_SECRET);\r\n        const userId = decoded.id;\r\n\r\n        const cachedTasks = await redis.get(`tasks:${userId}`);\r\n        if (cachedTasks) {\r\n            console.log(\"Serving from Redis Cache\");\r\n            return NextResponse.json(JSON.parse(cachedTasks));\r\n        }\r\n\r\n        const tasks = await prisma.task.findMany({\r\n            where: { userId }\r\n        });\r\n\r\n        await redis.set(`tasks:${userId}`, JSON.stringify(tasks), \"EX\", 60);\r\n        console.log(\"Serving from PostgreSQL\");\r\n        return NextResponse.json(tasks);\r\n    } catch (error) {\r\n        return NextResponse.json({ success: false, message: error.message }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}