{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/app/api/auth/signin/route.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Secret key for JWT (Store it in .env)\r\nconst JWT_SECRET = process.env.JWT_SECRET;\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const body = await req.json();\r\n    const { email, password } = body;\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json({ error: \"Email and password are required\" }, { status: 400 });\r\n    }\r\n\r\n    // Check if user exists\r\n    const user = await prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Compare hashed password\r\n    const isMatch = await bcrypt.compare(password, user.hashedPassword);\r\n    if (!isMatch) {\r\n      return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign(\r\n      { id: user.id, email: user.email },\r\n      JWT_SECRET,\r\n      { expiresIn: \"7d\" } // Token valid for 7 days\r\n    );\r\n\r\n    return NextResponse.json({ message: \"Login successful\", token, id : user.id, email : user.email}, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Sign-in Error:\", error);\r\n    return NextResponse.json({ error: \"Login failed\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,wCAAwC;AACxC,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAElC,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,uBAAuB;QACvB,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,0BAA0B;QAC1B,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,cAAc;QAClE,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,qBAAqB;QACrB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YAAE,IAAI,KAAK,EAAE;YAAE,OAAO,KAAK,KAAK;QAAC,GACjC,YACA;YAAE,WAAW;QAAK,EAAE,yBAAyB;;QAG/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAoB;YAAO,IAAK,KAAK,EAAE;YAAE,OAAQ,KAAK,KAAK;QAAA,GAAG;YAAE,QAAQ;QAAI;IAClH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}