{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new  PrismaClient()\r\n\r\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAK,6HAAA,CAAA,eAAY;uCAEjB","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/lib/redis.js"],"sourcesContent":["import Redis from \"ioredis\";\r\n\r\nconst redis = new Redis({\r\n    host : \"redis-17924.crce179.ap-south-1-1.ec2.redns.redis-cloud.com\",\r\n    port  : 17924,\r\n    password : \"XSFmdGSPZwzS5zUkEsW6dXsd2AlHaLnm\"\r\n}) ;\r\n\r\nexport default redis;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,QAAQ,IAAI,2IAAA,CAAA,UAAK,CAAC;IACpB,MAAO;IACP,MAAQ;IACR,UAAW;AACf;uCAEe","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Downloads/Taskoo/TaskManage/src/app/api/tasks/%5Bid%5D/route.js"],"sourcesContent":["import prisma from \"@/lib/prisma\";\r\nimport { NextResponse } from \"next/server\";\r\nimport redis from \"@/lib/redis\";\r\nimport { getToken } from \"next-auth/jwt\";\r\n\r\n\r\nexport async function GET(req, { params }) {\r\n    try {\r\n        const { id } = await params;\r\n\r\n        const task = await prisma.task.findUnique({ where: { id } });\r\n\r\n        if (!task) {\r\n            return NextResponse.json({ success: false, message: \"Task not found\" }, { status: 404 });\r\n        }\r\n\r\n        return NextResponse.json({ success: true, task });\r\n    } catch (error) {\r\n        return NextResponse.json({ success: false, message: error.message }, { status: 500 });\r\n    }\r\n}\r\n\r\n// Fix the PUT handler\r\nexport async function PUT(req, context) {\r\n    const token = await getToken({req, secret: process.env.NEXTAUTH_SECRET});\r\n    if (!token) {\r\n        return NextResponse.json({error: \"Unauthorized\"}, {status: 401})\r\n    }\r\n    \r\n    try {\r\n        const {completed} = await req.json();\r\n        // Get the params from context\r\n        const params = await context.params;\r\n        const taskId = params.id;\r\n\r\n        const task = await prisma.task.findUnique({\r\n            where: {id: taskId}\r\n        })\r\n\r\n        if (!task || task.userId !== token.user.id) {\r\n            return NextResponse.json({error: \"Not authorized to update task\"}, {status: 401})\r\n        }\r\n\r\n        const updatedTask = await prisma.task.update({\r\n            where: {id: taskId},\r\n            data: {completed},\r\n        })\r\n        await redis.del(\"tasks\");\r\n        return NextResponse.json({success: true, updatedTask})\r\n    } catch (error) {\r\n        return NextResponse.json({success: false, message: error.message}, {status: 500})\r\n    }\r\n}\r\n\r\n// Fix the DELETE handler\r\nexport async function DELETE(req, context) {\r\n    const token = await getToken({req, secret: process.env.NEXTAUTH_SECRET});\r\n    if (!token) {\r\n        return NextResponse.json({error: \"Unauthorized\"}, {status: 401});\r\n    }\r\n    \r\n    try {\r\n        // Get the params from context\r\n        const params = await context.params;\r\n        const taskId = params.id;\r\n        \r\n        const task = await prisma.task.findUnique({\r\n            where: {id: taskId}\r\n        })\r\n        \r\n        if (!task || task.userId !== token.user.id) {\r\n            return NextResponse.json({error: \"Not authorized to delete this task\"}, {status: 401})\r\n        }\r\n        \r\n        await prisma.task.delete({\r\n            where: {id: taskId}\r\n        });\r\n        \r\n        await redis.del(\"tasks\");\r\n        return NextResponse.json({success: true, message: \"Task Deleted Successfully!\"})\r\n    } catch (error) {\r\n        return NextResponse.json({success: false, message: error.message}, {status: 500})\r\n    }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}